local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local StarterGui = game:GetService("StarterGui")

-- Criar uma tela (ScreenGui)
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = playerGui

-- Fun√ß√£o para enviar mensagem no novo sistema de chat
local function sendChatMessage(message)
    local chatService = game:GetService("TextChatService")
    local chatChannel = chatService.TextChannels:FindFirstChild("RBXGeneral")
    
    if chatChannel then
        chatChannel:SendAsync(message)
    else
        warn("N√£o foi poss√≠vel encontrar o canal de chat.")
    end
end

-- Fun√ß√£o para criar um bot√£o
local function createButton(name, text, size, position, color, textColor, parent)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = size
    button.Position = position
    button.Text = text
    button.BackgroundColor3 = color
    button.TextColor3 = textColor
    button.Parent = parent
    button.AutoButtonColor = false  -- Desativa a mudan√ßa de cor autom√°tica ao clicar
    return button
end

-- Criar o bot√£o "SPAM M" (na posi√ß√£o desejada)
local spamButton = createButton("SpamButton", "SPAM M", UDim2.new(0, 80, 0, 40), UDim2.new(0.8, -80, 0.1, -20), Color3.fromRGB(0, 0, 0), Color3.fromRGB(255, 0, 0), screenGui)

-- Criar o bot√£o "SPAM R" (agora exatamente abaixo do SPAM M)
local renderButton = createButton("RenderButton", "SPAM R", UDim2.new(0, 80, 0, 40), UDim2.new(0.8, -80, 0.15, 0), Color3.fromRGB(0, 0, 0), Color3.fromRGB(255, 0, 0), screenGui)

-- Fun√ß√£o para exibir aviso com imagem
local function showAlert()
    StarterGui:SetCore("SendNotification", {
        Title = "wXIT INJECTED",
        Text = "wXIT BY Wesleygzts",
        Duration = 10,
        Icon = "rbxassetid://76766404101147"  -- ID da sua imagem
    })
end

-- Tornar os bot√µes arrast√°veis
local function makeButtonDraggable(button)
    local dragging = false
    local dragStart = nil
    local startPos = nil

    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = button.Position
        end
    end)

    button.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            button.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Tornar o bot√£o "X" arrast√°vel
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0, 30, 0, 30)  -- Tamanho do bot√£o menor
toggleButton.Position = UDim2.new(0.1, 0, 0.1, 0)  -- Posi√ß√£o inicial
toggleButton.Text = "X"  -- Texto "X" no bot√£o
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)  -- Cor de fundo preta
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)  -- Cor do texto
toggleButton.Parent = screenGui

-- Fazer o bot√£o circular (usar UICorner)
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(1, 0)  -- Definir raio como 1 para torn√°-lo completamente circular
corner.Parent = toggleButton

-- Fun√ß√£o para arrastar o bot√£o circular
local dragging = false
local dragStart = nil
local startPos = nil

toggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = toggleButton.Position
    end
end)

toggleButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        toggleButton.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
end)

-- Fun√ß√£o para alternar a visibilidade dos outros bot√µes
local areButtonsVisible = true
local function toggleButtonsVisibility()
    areButtonsVisible = not areButtonsVisible
    spamButton.Visible = areButtonsVisible
    renderButton.Visible = areButtonsVisible
end

-- Quando o bot√£o circular for clicado, alterna a visibilidade dos bot√µes
toggleButton.MouseButton1Click:Connect(toggleButtonsVisibility)

-- Quando o bot√£o "SPAM M" √© clicado, envia a mensagem "//MAT SEM ERRO üö©üêª"
spamButton.MouseButton1Click:Connect(function()
    sendChatMessage("//MAT SEM ERRO üö©üêª")
end)

-- Quando o bot√£o "SPAM R" √© clicado, envia a mensagem "//RENDER SEM ERRO üö©üêª"
renderButton.MouseButton1Click:Connect(function()
    sendChatMessage("//RENDER SEM ERRO üö©üêª")
end)

-- Exibir o aviso ao executar o script
showAlert()
